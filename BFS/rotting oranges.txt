class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Solution {
    private int[] dx = { 0, 0, 1, -1 };
    private int[] dy = { 1, -1, 0, 0 };

    public int orangesRotting(int[][] grid) {
        ArrayDeque<Point> queue = new ArrayDeque<>();

        int row = grid.length, col = grid[0].length, oranges = 0;

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 2) {
                    queue.offer(new Point(i, j));
                } else if (grid[i][j] == 1) {
                    oranges++;
                }
            }
        }

        int level = 0;
        while (!queue.isEmpty() && oranges > 0) {
            level++;

            int n = queue.size();
            while (n-- > 0) {
                Point node = queue.poll();

                for (int i = 0; i < 4; i++) {
                    int x = node.x + dx[i];
                    int y = node.y + dy[i];

                    if (x < 0 || x == row || y < 0 || y == col) {
                        continue;
                    }

                    if (grid[x][y] == 1) {
                        oranges--;
                        grid[x][y] = 2;

                        queue.offer(new Point(x, y));
                    }
                }
            }
        }

        return oranges == 0 ? level : -1;
    }
}
