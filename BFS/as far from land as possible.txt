class Point {
    int x, y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Solution {
    private int[] dx = { 0, 0, -1, 1 };
    private int[] dy = { 1, -1, 0, 0 };

    public int maxDistance(int[][] grid) {
        int row = grid.length, col = grid[0].length, land = 0, water = 0;

        int[][] dist = new int[row][col];

        ArrayDeque<Point> queue = new ArrayDeque<>();

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    land++;
                    queue.offer(new Point(i, j));

                    dist[i][j] = 0;
                } else {
                    water++;
                }
            }
        }

        if (water == 0 || land == 0) {
            return -1;
        }

        int ans = 0;

        while (!queue.isEmpty()) {
            int n = queue.size();

            while (n-- > 0) {
                Point current = queue.poll();

                for (int i = 0; i < dx.length; i++) {
                    int x = current.x + dx[i], y = current.y + dy[i];

                    if (x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == 1) {
                        continue;
                    }

                    grid[x][y] = 1;

                    dist[x][y] = dist[current.x][current.y] + 1;

                    ans = Math.max(ans, dist[x][y]);

                    queue.offer(new Point(x, y));
                }
            }
        }

        return ans;
    }
}