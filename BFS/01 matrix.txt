class Node {
    int x, y;

    Node(int x, int y) {
        this.x = x;
        this.y = y;
    }
}


class Solution {
    private int[] dx = {0, 0, -1, 1};
    private int[] dy = {1, -1, 0, 0};

    public int[][] updateMatrix(int[][] mat) {
        int row = mat.length, col = mat[0].length;

        ArrayDeque<Node> queue = new ArrayDeque<>();

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (mat[i][j] == 0) {
                    queue.offer(new Node(i, j));
                } else {
                    mat[i][j] = -1;
                }
            }
        }

        while (!queue.isEmpty()) {
            Node node = queue.poll();
            int x = node.x, y = node.y;

            for (int i = 0; i < dx.length; i++) {
                int new_x = x + dx[i];
                int new_y = y + dy[i];

                if (new_x < 0 || new_x == mat.length || new_y < 0 || new_y == mat[0].length) {
                    continue;
                }

                if (mat[new_x][new_y] != -1) {
                    continue;
                }

                mat[new_x][new_y] = mat[x][y] + 1;
                queue.offer(new Node(new_x, new_y));
            }
        }

        return mat;
    }
}