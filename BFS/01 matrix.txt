class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Solution {
    private int[] dx = { 0, 0, 1, -1 };
    private int[] dy = { 1, -1, 0, 0 };

    public int[][] updateMatrix(int[][] grid) {
        ArrayDeque<Point> queue = new ArrayDeque<>();

        int row = grid.length, col = grid[0].length;

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 0) {
                    queue.offer(new Point(i, j));
                } else {
                    grid[i][j] = -1;
                }
            }
        }

        while (!queue.isEmpty()) {
            Point node = queue.poll();

            for (int i = 0; i < 4; i++) {
                int newX = node.x + dx[i];
                int newY = node.y + dy[i];

                if (newX < 0 || newX == row || newY < 0 || newY == col) {
                    continue;
                }

                if (grid[newX][newY] == -1) {
                    grid[newX][newY] = 1 + grid[node.x][node.y];

                    queue.offer(new Point(newX, newY));
                }
            }
        }

        return grid;
    }
}