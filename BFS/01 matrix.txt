class Point {
    int x, y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Solution {
    private int[] dx = { 0, 0, -1, 1 };
    private int[] dy = { 1, -1, 0, 0 };

    public int[][] updateMatrix(int[][] grid) {
        int row = grid.length, col = grid[0].length;

        boolean[][] visited = new boolean[row][col];

        ArrayDeque<Point> queue = new ArrayDeque<>();

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 0) {
                    visited[i][j] = true;

                    queue.offer(new Point(i, j));
                }
            }
        }

        int level = 0;

        while (!queue.isEmpty()) {
            level++;

            int n = queue.size();
            while (n-- > 0) {
                Point current = queue.poll();

                for (int i = 0; i < dx.length; i++) {
                    int x = current.x + dx[i];
                    int y = current.y + dy[i];

                    if (x < 0 || x >= row || y < 0 || y >= col || visited[x][y] == true) {
                        continue;
                    }

                    grid[x][y] = level;
                    visited[x][y] = true;

                    queue.offer(new Point(x, y));
                }
            }
        }

        return grid;
    }

}