class Solution {
    enum Operators {
        PLUS("+") {
            int apply(int x, int y) {
                return x + y;
            }
        },
        MINUS("-") {
            int apply(int x, int y) {
                return x - y;
            }
        },
        MULTIPLY("*") {
            int apply(int x, int y) {
                return x * y;
            }
        },
        DIVISION("/") {
            int apply(int x, int y) {
                return x / y;
            }
        };

        private String operator;

        Operators(String operator) {
            this.operator = operator;
        }

        public String getOperator() {
            return this.operator;
        }

        abstract int apply(int x, int y);

        static boolean contains(String token) {
            for (Operators op : Operators.values()) {
                if (token.equals(op.getOperator())) {
                    return true;
                }
            }

            return false;
        }

        static Operators fromString(String token) {
            for (Operators op : Operators.values()) {
                if (op.getOperator().equals(token)) {
                    return op;
                }
            }

            return null;
        }

    }

    public int evalRPN(String[] tokens) {
        ArrayDeque<Integer> stack = new ArrayDeque<>();

        for (String token : tokens) {
            if (Operators.contains(token)) {
                int y = stack.pop();
                int x = stack.pop();

                stack.push(Operators.fromString(token).apply(x, y));

            } else {
                stack.push(Integer.parseInt(token));
            }
        }

        return stack.pop();
    }
}