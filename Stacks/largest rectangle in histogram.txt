class Solution {
    List<Integer> previousSmallerIndexes(int[] heights) {
        int n = heights.length;
        List<Integer> res = new ArrayList<>();

        ArrayDeque<int[]> stack = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            while (stack.size() > 0 && stack.peek()[0] >= heights[i]) {
                stack.pop();
            }

            int index = stack.size() > 0 ? stack.peek()[1] : -1;
            res.add(index);
            stack.push(new int[] { heights[i], i });
        }

        return res;
    }

    List<Integer> nextSmallerIndexes(int[] heights) {
        int n = heights.length;
        List<Integer> res = new ArrayList<>();

        ArrayDeque<int[]> stack = new ArrayDeque<>();

        for (int i = n - 1; i >= 0; i--) {
            while (stack.size() > 0 && stack.peek()[0] >= heights[i]) {
                stack.pop();
            }

            int index = stack.size() > 0 ? stack.peek()[1] : n;
            res.add(0, index);
            stack.push(new int[] { heights[i], i });
        }

        return res;
    }

    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        if (n == 0) {
            return 0;
        }

        if (n == 1) {
            return heights[0];
        }

        List<Integer> previousSmaller = previousSmallerIndexes(heights);
        List<Integer> nextSmaller = nextSmallerIndexes(heights);

        List<Integer> width = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            width.add(nextSmaller.get(i) - previousSmaller.get(i) - 1);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, heights[i] * width.get(i));
        }

        return ans;
    }
}