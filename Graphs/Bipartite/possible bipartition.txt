class Solution {
    private enum COLOR {
        WHITE, BLUE, GREEN;
    }

    private COLOR[] color;

    private boolean isBipartite(List<List<Integer>> graph, int src) {
        ArrayDeque<Integer> queue = new ArrayDeque<>();

        queue.offer(src);
        color[src] = COLOR.BLUE;

        while (!queue.isEmpty()) {
            int node = queue.poll();

            for (Integer neighbour : graph.get(node)) {
                if (color[neighbour] == COLOR.WHITE) {
                    color[neighbour] = color[node] == COLOR.BLUE ? COLOR.GREEN : COLOR.BLUE;

                    queue.offer(neighbour);
                } else if (color[neighbour] == color[node]) {
                    return false;
                }
            }
        }

        return true;
    }

    public boolean possibleBipartition(int n, int[][] dislikes) {
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] dislike : dislikes) {
            int u = dislike[0] - 1, v = dislike[1] - 1;

            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        color = new COLOR[n];
        Arrays.fill(color, COLOR.WHITE);

        for (int i = 0; i < n; i++) {
            if (color[i] == COLOR.WHITE) {
                if (!isBipartite(graph, i)) {
                    return false;
                }
            }
        }

        return true;
    }
}