class Solution {
    private void dfs(ArrayList<Integer>[] graph, boolean[] visited, int src) {
        visited[src] = true;
        for (Integer neighbour : graph[src]) {
            if (!visited[neighbour]) {
                dfs(graph, visited, neighbour);
            }
        }
    }

    public int makeConnected(int n, int[][] connections) {
        if (connections.length < (n - 1)) {
            return -1;
        }

        ArrayList<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int[] connection : connections) {
            int u = connection[0], v = connection[1];

            graph[u].add(v);
            graph[v].add(u);
        }

        boolean[] visited = new boolean[n];

        int components = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                components++;

                dfs(graph, visited, i);
            }
        }

        return components - 1;
    }
}