class Edge {
    int u, v;

    Edge(int u, int v) {
        this.u = u;
        this.v = v;
    }
}

class Solution {
    private boolean dfs(List<Edge>[] graph, boolean[] visited, int src, int dest) {
        if (src == dest) {
            return true;
        }

        visited[src] = true;
        for (Edge edge : graph[src]) {
            if (!visited[edge.v]) {
                if (dfs(graph, visited, edge.v, dest)) {
                    return true;
                }
            }
        }

        return false;
    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        ArrayList<Edge>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];

            graph[u].add(new Edge(u, v));
            graph[v].add(new Edge(v, u));
        }

        boolean[] visited = new boolean[n];

        return dfs(graph, visited, source, destination);

    }
}