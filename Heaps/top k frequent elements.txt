class Element {
    int freq;
    int num;

    Element(int freq, int num) {
        this.freq = freq;
        this.num = num;
    }
}

class ElementComparator implements Comparator<Element> {
    public int compare(Element e1, Element e2) {
        if (e1.freq == e2.freq) {
            return Integer.compare(e1.num, e2.num);
        }

        return Integer.compare(e1.freq, e2.freq);
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> mp = new HashMap<>();
        for (int num : nums) {
            mp.put(num, mp.getOrDefault(num, 0) + 1);
        }

        Queue<Element> pq = new PriorityQueue<>(new ElementComparator());

        for (Integer key : mp.keySet()) {
            pq.add(new Element(mp.get(key), key));

            if (pq.size() > k) {
                pq.poll();
            }
        }

        int[] res = new int[k];

        int index = k - 1;
        while (pq.size() > 0) {
            res[index] = pq.poll().num;
            index--;
        }

        return res;
    }
}