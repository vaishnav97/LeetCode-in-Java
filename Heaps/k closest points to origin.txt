class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class PointComparator implements Comparator<Point> {
    public int compare(Point a, Point b) {
        return Integer.compare((b.x * b.x + b.y * b.y), (a.x * a.x + a.y * a.y));
    }
}

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        int len = points.length;

        Queue<Point> pq = new PriorityQueue<>(new PointComparator());

        for (int i = 0; i < len; i++) {
            int x = points[i][0];
            int y = points[i][1];

            pq.add(new Point(x, y));

            if (pq.size() > k) {
                pq.poll();
            }
        }

        int[][] res = new int[k][2];

        int index = k - 1;
        while (pq.size() > 0) {
            Point point = pq.poll();
            res[index][0] = point.x;
            res[index][1] = point.y;

            index--;
        }

        return res;
    }
}