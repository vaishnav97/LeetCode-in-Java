class Solution {
    public int maxSumAfterOperation(int[] nums) {
        int n = nums.length;
        if (n == 1) {
            return nums[0] * nums[0];
        }

        int[] left = new int[n];
        int[] right = new int[n];

        left[0] = right[n - 1] = 0;

        for (int i = 1; i < n; i++) {
            left[i] = (left[i - 1] < 0) ? nums[i - 1] : nums[i - 1] + left[i - 1];
        }

        for (int i = n - 2; i >= 0; i--) {
            right[i] = (right[i + 1] < 0) ? nums[i + 1] : nums[i + 1] + right[i + 1];
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            int leftAns = Math.max(0, left[i]);
            int rightAns = Math.max(0, right[i]);

            ans = Math.max(ans, nums[i] * nums[i] + leftAns + rightAns);
        }

        return ans;
    }
}