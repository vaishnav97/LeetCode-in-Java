class Solution {
    private boolean isPossible(int[] days, int totalBouquets, int totalAdjacentFlowers, int toUseFlowers) {
        int currentAdjacentCount = 0, bouquets = 0;

        for (int day : days) {
            if (day <= toUseFlowers) {
                currentAdjacentCount++;

                if (currentAdjacentCount == totalAdjacentFlowers) {
                    bouquets++;
                    currentAdjacentCount = 0;
                }
            } else {
                currentAdjacentCount = 0;
            }
        }

        return bouquets >= totalBouquets;
    }

    public int minDays(int[] bloomDay, int m, int k) {
        int start = bloomDay[0], end = bloomDay[0];
        for (int day : bloomDay) {
            start = Math.min(start, day);
            end = Math.max(end, day);
        }

        int ans = -1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (isPossible(bloomDay, m, k, mid)) {
                ans = mid;
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }

        return ans;
    }
}