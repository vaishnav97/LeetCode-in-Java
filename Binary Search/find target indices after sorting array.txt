class Solution {
    private int getOccurence(int[] nums, int target, boolean firstOccurence) {
        int low = 0;
        int high = nums.length - 1;
        int ans = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (target == nums[mid]) {
                ans = mid;

                if (firstOccurence) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else if (target < nums[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }

    private int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) {
            return new int[] { -1, -1 };
        }

        int firstOccurence = getOccurence(nums, target, true);

        if (firstOccurence == -1) {
            return new int[] { -1, -1 };
        }

        int lastOccurence = getOccurence(nums, target, false);
        return new int[] { firstOccurence, lastOccurence };
    }

    public List<Integer> targetIndices(int[] nums, int target) {
        Arrays.sort(nums);

        int[] ranges = searchRange(nums, target);

        List<Integer> res = new ArrayList<>();

        if (ranges[0] == -1) {
            return res;
        }

        for (int num = ranges[0]; num <= ranges[1]; num++) {
            res.add(num);
        }

        return res;

    }
}