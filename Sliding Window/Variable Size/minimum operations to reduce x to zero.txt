class Solution {
    private int maximumSubarraySize(int[] nums, int target) {
        int i = 0, j = 0, sum = 0, ans = Integer.MIN_VALUE;

        while (j < nums.length) {
            sum += nums[j];

            while (i <= j && sum > target) {
                sum -= nums[i];
                i++;
            }

            if (sum == target) {
                ans = Math.max(ans, (j - i + 1));
            }

            j++;
        }

        return ans;
    }

    public int minOperations(int[] nums, int x) {
        int total = 0;
        for (Integer num : nums) {
            total += num;
        }

        int target = total - x;
        int largestSize = maximumSubarraySize(nums, target);

        return largestSize == Integer.MIN_VALUE ? -1 : (nums.length - largestSize);
    }
}