class Solution {
    private int lengthOfLongestSubstringKDistinct(int[] nums, int k) {
        if (nums.length <= k) {
            return nums.length;
        }

        Map<Integer, Integer> freq = new HashMap<>();

        int i = 0, j = 0, distinct = 0, ans = 0;

        while (j < nums.length) {
            int num = nums[j];
            freq.put(num, freq.getOrDefault(num, 0) + 1);

            if (freq.get(num) == 1) {
                distinct++;
            }

            while (distinct > k) {
                num = nums[i];

                if (freq.get(num) != null) {
                    freq.put(num, Math.max(0, freq.get(num) - 1));
                }

                if (freq.get(num) == 0) {
                    distinct--;
                }

                i++;
            }

            ans += j - i + 1;
            j++;
        }

        return ans;
    }

    public int subarraysWithKDistinct(int[] nums, int k) {
        return lengthOfLongestSubstringKDistinct(nums, k) - lengthOfLongestSubstringKDistinct(nums, k - 1);
    }
}