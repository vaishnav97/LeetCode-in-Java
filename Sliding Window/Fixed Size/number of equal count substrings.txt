class Solution {
    private int getCount(String input, int count, int k) {
        Map<Character, Integer> freq = new HashMap<>();

        int i = 0, j = 0, countFulfilled = 0, ans = 0;
        while (j < input.length()) {
            char ch = input.charAt(j);
            freq.put(ch, freq.getOrDefault(ch, 0) + 1);

            if (freq.get(ch) == count) {
                countFulfilled++;
            }

            if ((j - i + 1) < k) {
                j++;
            } else if ((j - i + 1) == k) {
                if (countFulfilled * count == k) {
                    ans++;
                }

                ch = input.charAt(i);

                if (freq.get(ch) != null) {
                    if (freq.get(ch) == count) {
                        countFulfilled--;
                    }

                    freq.put(ch, freq.get(ch) - 1);

                    if (freq.get(ch) == 0) {
                        freq.remove(ch);
                    }
                }

                i++;
                j++;
            }
        }

        return ans;
    }

    public int equalCountSubstrings(String input, int count) {
        Set<Character> visited = new HashSet<>();
        for (Character ch : input.toCharArray()) {
            visited.add(ch);
        }

        int unique = visited.size(), i = 1, ans = 0;

        while (i <= unique && i * count <= input.length()) {
            int windowLength = i * count;

            ans += getCount(input, count, windowLength);
            i++;
        }

        return ans;
    }
}