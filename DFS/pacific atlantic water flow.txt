class Solution {
    private int[] dx = { 0, 0, -1, 1 };
    private int[] dy = { 1, -1, 0, 0 };

    private void markIsland(int[][] heights, int x, int y, int[][] ocean, int prev) {
        if (x < 0 || x >= heights.length || y < 0 || y >= heights[0].length) {
            return;
        }

        if (ocean[x][y] == 1) {
            return;
        }

        if (heights[x][y] < prev) {
            return;
        }

        ocean[x][y] = 1;

        for (int i = 0; i < dx.length; i++) {
            markIsland(heights, x + dx[i], y + dy[i], ocean, heights[x][y]);
        }
    }

    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int row = heights.length, col = heights[0].length;

        int[][] pacific = new int[row][col];
        int[][] atlantic = new int[row][col];

        for (int i = 0; i < row; i++) {
            markIsland(heights, i, 0, pacific, Integer.MIN_VALUE);
            markIsland(heights, i, col - 1, atlantic, Integer.MIN_VALUE);
        }

        for (int j = 0; j < col; j++) {
            markIsland(heights, 0, j, pacific, Integer.MIN_VALUE);
            markIsland(heights, row - 1, j, atlantic, Integer.MIN_VALUE);
        }

        List<List<Integer>> ans = new ArrayList<>();

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (pacific[i][j] == 1 && atlantic[i][j] == 1) {
                    ans.add(new ArrayList<>(Arrays.asList(i, j)));
                }
            }
        }

        return ans;
    }
}