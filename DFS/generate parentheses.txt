class Solution {
    public List<String> ans = new ArrayList<>();

    private StringBuilder path = new StringBuilder();

    private void dfs(int open, int closed) {
        if (open == 0 && closed == 0) {
            ans.add(path.toString());
            return;
        }

        if (open > 0) {
            path.append('(');
            dfs(open - 1, closed);
            path.deleteCharAt(path.length() - 1);
        }

        if (open < closed) {
            path.append(')');
            dfs(open, closed - 1);
            path.deleteCharAt(path.length() - 1);
        }
    }

    public List<String> generateParenthesis(int n) {
        if (n == 1) {
            return Arrays.asList("()");
        }

        dfs(n, n);

        return ans;
    }
}