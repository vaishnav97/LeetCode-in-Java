class Solution {
    private int[][] directions = { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };

    private int computeArea(int[][] grid, int x, int y) {
        if (x < 0 || x == grid.length || y < 0 || y == grid[0].length || grid[x][y] == 0) {
            return 0;
        }

        int area = 1;

        grid[x][y] = 0;

        for (int[] direction : directions) {
            int newX = x + direction[0];
            int newY = y + direction[1];

            area += computeArea(grid, newX, newY);
        }

        return area;
    }

    public int maxAreaOfIsland(int[][] grid) {
        int row = grid.length;

        if (row == 0) {
            return 0;
        }

        int col = grid[0].length;

        int ans = 0;

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    int area = computeArea(grid, i, j);
                    ans = Math.max(ans, area);
                }
            }
        }

        return ans;
    }
}