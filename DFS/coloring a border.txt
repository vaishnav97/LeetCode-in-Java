class Solution {
    private int[] dx = {0, 0, -1, 1};
    private int[] dy = {1, -1, 0, 0};

    private void dfs(int[][] grid, int x, int y, int color) {
        grid[x][y] = -color;

        int totalColor = 0;

        for (int i = 0; i < dx.length; i++) {
            int new_x = x + dx[i];
            int new_y = y + dy[i];

            if (new_x < 0 || new_x == grid.length || new_y < 0 || new_y == grid[0].length) {
                continue;
            }

            if (Math.abs(grid[new_x][new_y]) != color) {
                continue;
            }

            totalColor++;

            if (grid[new_x][new_y] == color) {
                dfs(grid, new_x, new_y, color);
            }
        }

        if (totalColor == 4) {
            grid[x][y] = color;
        }
    }

    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        dfs(grid, row, col, grid[row][col]);

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] < 0) {
                    grid[i][j] = color;
                }
            }
        }

        return grid;
    }
}