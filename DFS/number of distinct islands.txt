class Solution {
    private int[] dx = { 0, 0, 1, -1 };
    private int[] dy = { 1, -1, 0, 0 };
    private String[] directions = { "r", "l", "d", "u" };

    private Set<String> islands = new HashSet<>();

    private void markIsland(int[][] grid, int x, int y, StringBuilder path, String dir) {
        if (x < 0 || x == grid.length || y < 0 || y == grid[0].length || grid[x][y] == 0) {
            return;
        }

        path.append(dir);
        grid[x][y] = 0;

        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];
            String direction = directions[i];

            markIsland(grid, newX, newY, path, direction);
        }

        path.append("b");
    }

    public int numDistinctIslands(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int row = grid.length;
        int col = grid[0].length;

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    StringBuilder path = new StringBuilder();

                    markIsland(grid, i, j, path, "s");

                    islands.add(path.toString());
                }
            }
        }

        return islands.size();
    }
}
