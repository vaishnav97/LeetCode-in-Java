class Solution {
    private int[] dx = {0, 0, -1, 1};
    private int[] dy = {1, -1, 0, 0};
    private char[] dir = {'R', 'L', 'U', 'D'};

    private void dfs(int[][] grid, StringBuilder path, int x, int y) {
        if (grid[x][y] == 0) {
            return;
        }

        grid[x][y] = 0;

        for (int i = 0; i < dx.length; i++) {
            int new_x = x + dx[i];
            int new_y = y + dy[i];

            if (new_x < 0 || new_x == grid.length || new_y < 0 || new_y == grid[0].length) {
                continue;
            }

            if (grid[new_x][new_y] == 0) {
                continue;
            }

            dfs(grid, path.append(dir[i]), new_x, new_y);
        }

        path.append('B');
    }

    public int numDistinctIslands(int[][] grid) {
        int row = grid.length, col = grid[0].length;

        HashSet<String> structures = new HashSet<>();

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    StringBuilder path = new StringBuilder();

                    dfs(grid, path, i, j);

                    structures.add(path.toString());
                }
            }
        }

        return structures.size();
    }
}