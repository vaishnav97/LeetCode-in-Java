class Solution {
    private void swap(char[] digits, int i, int j) {
        char temp = digits[i];
        digits[i] = digits[j];
        digits[j] = temp;
    }

    private void reverse(char[] digits, int start, int end) {
        while (start <= end) {
            swap(digits, start, end);
            start++;
            end--;
        }
    }

    private boolean nextPermutation(char[] digits) {
        int n = digits.length;
        int index1 = -1;

        for (int i = n - 2; i >= 0; i--) {
            if (digits[i] < digits[i + 1]) {
                index1 = i;
                break;
            }
        }

        if (index1 == -1) {
            return false;
        }

        int index2 = -1;
        for (int i = n - 1; i > index1; i--) {
            if (digits[index1] < digits[i]) {
                index2 = i;
                break;
            }
        }

        swap(digits, index1, index2);
        reverse(digits, index1 + 1, n - 1);

        return true;
    }

    public int nextGreaterElement(int n) {
        if (n <= 11) {
            return -1;
        }

        char[] digits = String.valueOf(n).toCharArray();

        boolean permute = nextPermutation(digits);
        if (!permute) {
            return -1;
        }

        long res = Long.parseLong(new String(digits));
        return res > n && res <= Integer.MAX_VALUE ? (int) res : -1;
    }
}