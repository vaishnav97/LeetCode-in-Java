class Solution {
    private int subsetSum(int[] nums, int sum) {
        int n = nums.length;
        int[][] dp = new int[n + 1][sum + 1];

        dp[0][0] = 1;

        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
        }

        for (int j = 1; j <= sum; j++) {
            dp[0][j] = 0;
        }

        for (int i = 1; i <= n; i++) {
            // j starts from 0, becuase 0s are considered valid in this problem 
            //e.g - nums: [0,0,0,0], target: 0, ans = 16
            
            for (int j = 0; j <= sum; j++) { 
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][sum];
    }

    public int findTargetSumWays(int[] nums, int target) {
        target = Math.abs(target);

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }

        if (sum < target || (sum + target) % 2 != 0) {
            return 0;
        }

        return subsetSum(nums, (sum + target) / 2);
    }
}