class Solution {
    private int minimizeSubsetSum(int[] stones, int sum) {
        int n = stones.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];

        dp[0][0] = true;

        for (int i = 1; i <= n; i++) {
            dp[i][0] = true;
        }

        for (int j = 1; j <= sum; j++) {
            dp[0][j] = false;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (stones[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j - stones[i - 1]] || dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        int ans = Integer.MAX_VALUE;
        for (int i = sum / 2; i >= 0; i--) {
            if (dp[n][i] == true) {
                ans = sum - 2 * i;
                break;
            }
        }

        return ans == Integer.MAX_VALUE ? 0 : ans;
    }

    public int lastStoneWeightII(int[] stones) {
        int sum = 0;
        for (int stone : stones) {
            sum += stone;
        }

        return minimizeSubsetSum(stones, sum);
    }
}