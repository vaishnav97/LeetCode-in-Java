class Solution {
    private int[] dx = { 0, 0, 1, -1 };
    private int[] dy = { 1, -1, 0, 0 };

    private int dfs(int[][] grid, int row, int col, int zero, int x, int y) {
        if (x < 0 || x >= row || y < 0 || y >= col || grid[x][y] == -1) {
            return 0;
        }

        if (grid[x][y] == 2) {
            return zero == -1 ? 1 : 0;
        }

        grid[x][y] = -1;
        zero--;

        int ans = 0;
        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];

            ans += dfs(grid, row, col, zero, newX, newY);
        }

        grid[x][y] = 0;
        zero++;

        return ans;
    }

    public int uniquePathsIII(int[][] grid) {
        int row = grid.length, col = grid[0].length;

        int sx = 0, sy = 0, zero = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 0) {
                    zero++;
                } else if (grid[i][j] == 1) {
                    sx = i;
                    sy = j;
                }
            }
        }

        return dfs(grid, row, col, zero, sx, sy);
    }
}