class Solution {
    private int[] dx = { 0, 0, 1, -1 };
    private int[] dy = { 1, -1, 0, 0 };

    private int dfs(int[][] matrix, int[][] dp, int x, int y) {
        if (dp[x][y] != 0) {
            return dp[x][y];
        }

        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];

            if (newX >= 0 && newX < matrix.length && newY >= 0 && newY < matrix[0].length) {
                if (matrix[newX][newY] > matrix[x][y]) {
                    dp[x][y] = Math.max(dp[x][y], dfs(matrix, dp, newX, newY));
                }
            }
        }

        return ++dp[x][y];
    }

    public int longestIncreasingPath(int[][] matrix) {
        int row = matrix.length, col = matrix[0].length, ans = 0;

        int[][] dp = new int[row][col];
        for (int[] c : dp) {
            Arrays.fill(c, 0);
        }

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (dp[i][j] == 0) {
                    ans = Math.max(ans, dfs(matrix, dp, i, j));
                }
            }
        }

        return ans;
    }
}