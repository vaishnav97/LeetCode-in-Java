class Solution {
    private void swap(char[] input, int i, int j) {
        char temp = input[i];
        input[i] = input[j];
        input[j] = temp;
    }

    private void reverse(char[] input, int start, int end) {
        while (start <= end) {
            swap(input, start, end);
            start++;
            end--;
        }
    }

    private int longestCommonSubsequence(String text1, String text2) {
        if (text1.length() == 0 || text2.length() == 0) {
            return 0;
        }

        int n = text1.length();
        int m = text2.length();

        int[][] dp = new int[n + 1][m + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n][m];
    }

    public int minInsertions(String input) {
        if (input.length() == 1) {
            return 0;
        }

        char[] reverseStr = input.toCharArray();
        reverse(reverseStr, 0, input.length() - 1);

        int lcs = longestCommonSubsequence(input, new String(reverseStr));

        return input.length() - lcs;
    }
}