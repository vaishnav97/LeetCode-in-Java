class Solution {
    private int longestCommonSubsequence(String text1, String text2) {
        if (text1.length() == 0 || text2.length() == 0) {
            return 0;
        }

        int n = text1.length();
        int m = text2.length();

        int[][] dp = new int[n + 1][m + 1];

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = (int) text1.charAt(i - 1) + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n][m];
    }

    public int minimumDeleteSum(String word1, String word2) {
        int word1ASCIISum = 0;
        for (char word : word1.toCharArray()) {
            word1ASCIISum += (int) word;
        }

        int word2ASCIISum = 0;
        for (char word : word2.toCharArray()) {
            word2ASCIISum += (int) word;
        }

        int lcs = longestCommonSubsequence(word1, word2);
        return (word1ASCIISum + word2ASCIISum - (2 * lcs));
    }
}