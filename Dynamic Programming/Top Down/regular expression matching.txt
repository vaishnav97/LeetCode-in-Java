class Solution {
    private int[][] cache;
    private char[] input;
    private char[] pattern;

    private boolean dfs(int i, int j) {
        if (j == pattern.length) {
            return i == input.length;
        }

        if (i < input.length && j < pattern.length && cache[i][j] != -1) {
            return cache[i][j] == 1;
        }

        boolean ans = false;

        boolean match = (i < input.length && input[i] == pattern[j]) || (pattern[j] == '.');

        if (j + 1 < pattern.length && pattern[j + 1] == '*') {
            ans = dfs(i, j + 2) || (match && i < input.length && dfs(i + 1, j));
        } else {
            ans = match && dfs(i + 1, j + 1);
        }

        if (i < input.length && j < pattern.length) {
            cache[i][j] = ans ? 1 : 0;
        }

        return ans;
    }

    public boolean isMatch(String str, String ptr) {
        if (str.equals(ptr)) {
            return true;
        }

        input = str.toCharArray();
        pattern = ptr.toCharArray();

        cache = new int[input.length + 1][pattern.length + 1];

        for (int[] row : cache) {
            Arrays.fill(row, -1);
        }

        return dfs(0, 0);
    }
}