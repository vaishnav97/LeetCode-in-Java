class Solution {
    private boolean isPredecessor(String bigger, String smaller) {
        int n = bigger.length(), m = smaller.length();

        if (n - m != 1) {
            return false;
        }

        int index = 0;
        while (index < m) {
            if (bigger.charAt(index) != smaller.charAt(index)) {
                break;
            }

            index++;
        }

        String cmp = bigger.substring(0, index) + bigger.substring(index + 1);

        return cmp.compareTo(smaller) == 0;
    }

    public int longestStrChain(String[] words) {
        int n = words.length;
        if (n == 1) {
            return 1;
        }

        final Comparator<String> myComparator = new Comparator<String>() {
            public int compare(String a, String b) {
                return Integer.compare(a.length(), b.length());
            }
        };

        Arrays.sort(words, myComparator);

        int dp[] = new int[n], ans = 0;
        dp[0] = 1;

        for (int i = 1; i < n; i++) {
            dp[i] = 1;

            for (int j = 0; j < i; j++) {
                if (isPredecessor(words[i], words[j]) && dp[i] < (dp[j] + 1)) {
                    dp[i] = dp[j] + 1;
                }
            }

            ans = Math.max(ans, dp[i]);
        }

        return ans;
    }
}