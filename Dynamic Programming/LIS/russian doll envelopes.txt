class Solution {
    private int binarySearch(List<int[]> lis, int[] target) {
        int low = 0, high = lis.size() - 1, ans = Integer.MAX_VALUE;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (lis.get(mid)[1] >= target[1]) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans == Integer.MAX_VALUE ? -1 : ans;
    }

    public int maxEnvelopes(int[][] envelopes) {
        int n = envelopes.length;
        if (n == 0) {
            return 0;
        }

        final Comparator<int[]> myComparator = new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) {
                    return Integer.compare(b[1], a[1]);
                }

                return Integer.compare(a[0], b[0]);
            }
        };

        Arrays.sort(envelopes, myComparator);

        List<int[]> lis = new ArrayList<>();
        lis.add(envelopes[0]);

        for (int i = 1; i < n; i++) {
            int index = binarySearch(lis, envelopes[i]);

            if (index == -1) {
                lis.add(envelopes[i]);
            } else {
                lis.set(index, envelopes[i]);
            }
        }

        return lis.size();
    }
}