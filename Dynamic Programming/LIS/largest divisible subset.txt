class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);

        int dp[] = new int[n], maxLen = 1;
        dp[0] = 1;

        for (int i = 1; i < n; i++) {
            dp[i] = 1;

            for (int j = 0; j < i; j++) {
                if ((nums[i] % nums[j]) == 0 && dp[i] < (dp[j] + 1)) {
                    dp[i] = dp[j] + 1;
                }
            }

            maxLen = Math.max(maxLen, dp[i]);
        }

        List<Integer> res = new ArrayList<>();
        int prev = -1;

        for (int i = n - 1; i >= 0; i--) {
            if (dp[i] == maxLen && (prev == -1 || (prev % nums[i]) == 0)) {
                res.add(0, nums[i]);

                prev = nums[i];
                maxLen--;
            }
        }

        return res;
    }
}