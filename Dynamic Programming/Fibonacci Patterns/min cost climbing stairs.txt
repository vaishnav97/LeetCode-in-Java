class Solution {
    private int helper(int[] cost, int[] memo, int index) {
        if (index >= cost.length) {
            return 0;
        }

        if (memo[index] != -1) {
            return memo[index];
        }

        int jump1 = helper(cost, memo, index + 1) + cost[index];
        int jump2 = helper(cost, memo, index + 2) + cost[index];

        return memo[index] = Math.min(jump1, jump2);
    }

    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;

        int[] memo = new int[n + 1];
        Arrays.fill(memo, -1);

        return Math.min(helper(cost, memo, 0), helper(cost, memo, 1));
    }
}