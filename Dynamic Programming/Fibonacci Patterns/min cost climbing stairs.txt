DP:

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;

        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 0;

        for (int i = 2; i <= n; i++) {
            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }

        return dp[n];
    }
}

Recursion with Memoization:

class Solution {
    private int helper(int[] cost, int[] dp, int n) {
        if (n == 0 || n == 1) {
            return 0;
        }

        if (dp[n] != -1) {
            return dp[n];
        }

        int op1 = helper(cost, dp, n - 1) + cost[n - 1];
        int op2 = helper(cost, dp, n - 2) + cost[n - 2];

        return dp[n] = Math.min(op1, op2);
    }

    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;

        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);

        return helper(cost, dp, n);
    }
}