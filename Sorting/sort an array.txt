class Solution {
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void downHeapify(int[] nums, int n, int index) {
        int largest = index;
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;

        if (leftChild < n && nums[leftChild] > nums[largest]) {
            largest = leftChild;
        }

        if (rightChild < n && nums[rightChild] > nums[largest]) {
            largest = rightChild;
        }

        if (largest != index) {
            swap(nums, largest, index);
            downHeapify(nums, n, largest);
        }
    }

    public int[] sortArray(int[] nums) {
        int n = nums.length;

        for (int i = (n / 2) - 1; i >= 0; i--) {
            downHeapify(nums, n, i);
        }

        for (int i = n - 1; i >= 0; i--) {
            swap(nums, i, 0);
            downHeapify(nums, i, 0);
        }

        return nums;
    }
}